<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.justdavis.karl.jessentials</groupId>
		<artifactId>jessentials-parent</artifactId>
		<version>3.4.0</version>
		<!-- Disabling filesystem resolution, per http://maven.apache.org/ref/3.0.3/maven-model/maven.html#class_parent. -->
		<relativePath></relativePath>
	</parent>

	<artifactId>jessentials-misc</artifactId>
	<version>2.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>jEssentials Miscellanany</name>
	<description>
		Miscellaneous utility types.
	</description>

	<scm>
		<!-- URL format taken from http://www.sonatype.com/people/2009/09/maven-tips-and-tricks-using-github/ -->
		<!-- Needs to be repeated here, due to the flat module layout being used. -->
		<connection>scm:git:git@github.com:karlmdavis/jessentials.git</connection>
		<developerConnection>scm:git:git@github.com:karlmdavis/jessentials.git</developerConnection>
		<url>https://github.com/karlmdavis/jessentials</url>
		<tag>HEAD</tag>
	</scm>

	<repositories>
		<!-- Because we're using a flat, non-standard module layout the repositories 
			have to be included here as well. -->
		<repository>
			<id>justdavis.com-nexus-opensource-releases</id>
			<url>https://justdavis.com/nexus/content/repositories/opensource-releases/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>justdavis.com-nexus-opensource-snapshots</id>
			<url>https://justdavis.com/nexus/content/repositories/opensource-snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>justdavis.com-nexus-opensource-thirdparty-releases</id>
			<url>https://justdavis.com/nexus/content/repositories/opensource-thirdparty-releases/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>justdavis.com-nexus-opensource-thirdparty-snapshots</id>
			<url>https://justdavis.com/nexus/content/repositories/opensource-thirdparty-snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<!-- SLF4J is really the only way to make the Java logging dependency 
				mess somewhat sane. Its APIs should be used by everything for logging, rather 
				than the java.util logging, log4j, or whatever else. -->
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<!-- A backport of Java 8's JSR-310 date & time library. https://github.com/ThreeTen/threetenbp. 
				This was added here as it's so useful/basic, that it really ought to be used 
				in every project (that isn't already on Java 8). -->
			<groupId>org.threeten</groupId>
			<artifactId>threetenbp</artifactId>
			<version>1.0</version>
		</dependency>

		<dependency>
			<!-- Provides annotations that specify dependency injection points. -->
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
		</dependency>
		<dependency>
			<!-- A dependency injection provider. The only thing used from here are 
				the Spring annotations, to enable classpath scanning for other projects that 
				use Spring. It's set as an optional dependency. -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>4.0.0.RELEASE</version>
			<optional>true</optional>
		</dependency>

		<dependency>
			<!-- An in-memory embedded SQL DB. Often used just for unit/integration 
				tests, due to its speed and easy setup. -->
			<!-- This dependency is marked optional. It's only needed if the com.justdavis.karl.misc.datasources.hsql 
				API is being used. -->
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>2.3.1</version>
			<optional>true</optional>
		</dependency>
		<dependency>
			<!-- JDBC drivers for the PostgreSQL open source RDBMS. This version supports 
				Java 6 and above (the '-jdbc41' version supports Java 7 and above). -->
			<!-- This dependency is marked optional. It's only needed if the com.justdavis.karl.misc.datasources.postgresql 
				API is being used. -->
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>9.3-1100-jdbc4</version>
			<optional>true</optional>
		</dependency>

		<dependency>
			<!-- Provides a database schema population/upgrade mechanism. See the 
				com.justdavis.karl.misc.datasources.schema package. -->
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
			<version>3.3.2</version>
		</dependency>
		<dependency>
			<!-- Liquibase uses it's own pluggable logging framework. This dependency 
				re-routes the logging events in it to SLF4J. -->
			<groupId>com.mattbertolini</groupId>
			<artifactId>liquibase-slf4j</artifactId>
			<version>1.2.1</version>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- Logback is used as the logging target/backend for SLF4J in tests: 
				all logging events will be sent to it. -->
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.0.13</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<!-- Jetty is an embedded web server that can be used to test applications. -->
			<!-- This dependency is marked optional. It is only needed if the com.justdavis.karl.misc.jetty.EmbeddedServer 
				class is being used. -->
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-webapp</artifactId>
			<version>9.0.6.v20130930</version>
			<optional>true</optional>
		</dependency>
		<dependency>
			<!-- This is required for how we're using Jetty. -->
			<!-- This dependency is marked optional. It is only needed if the com.justdavis.karl.misc.jetty.EmbeddedServer 
				class is being used. -->
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-annotations</artifactId>
			<version>9.0.6.v20130930</version>
			<optional>true</optional>
		</dependency>
		<dependency>
			<!-- Used to generate the SSL cert that is used by Jetty. -->
			<!-- This dependency is marked optional. It is only needed if the com.justdavis.karl.misc.jetty.EmbeddedServer 
				class is being used. -->
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcpkix-jdk15on</artifactId>
			<version>1.49</version>
			<optional>true</optional>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<executions>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on unit test coverage), such that 
							it can be passed as a VM argument to the application under test. Surefire 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<!-- Will set the 'argline' Maven property to point to the JaCoCo runtime 
							agent (configured to track information on integration test coverage), such 
							that it can be passed as a VM argument to the application under test. Failsafe 
							will pick up this property automatically, by default. Sonar can then pick 
							up the output produced by JaCoCo. -->
						<id>default-prepare-agent-integration</id>
						<goals>
							<goal>prepare-agent-integration</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- Ensure that this project's integration tests are run as part of 
					the build. -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
