package com.justdavis.jessentials.jversionsanity.bareint;

import com.justdavis.jessentials.jversionsanity.Version;
import com.justdavis.jessentials.jversionsanity.VersionParseException;

/**
 * <p>
 * This {@link Version} implementation can be used to represent versions that
 * are a simple, "bare" non-negative integer value only, e.g. "<code>0</code>
 * ", " <code>4</code>", etc.
 * </p>
 * <p>
 * Such a versioning scheme is often used to model the compatibility of public
 * APIs.
 * </p>
 * <h3>Equivalency</h3>
 * <p>
 * Two {@link IntegerVersion}s are considered equivalent if their integer values
 * are equal. This equivalency intentionally ignores leading zeroes and leading
 * or trailing whitespace.
 * </p>
 */
public final class IntegerVersion implements Version {
	/**
	 * Stores the {@link String} that this {@link IntegerVersion} instance was
	 * parsed from, or <code>null</code> if it was constructed manually.
	 */
	private final String versionString;

	/**
	 * The non-negative integer version value.
	 */
	private final Integer versionValue;

	/**
	 * Parses an {@link IntegerVersion} from the specified {@link String}
	 * representation.
	 * 
	 * @param versionString
	 *            a {@link String} representation of an {@link IntegerVersion},
	 *            e.g. as produced by {@link #toString()}
	 * @throws VersionParseException
	 *             A {@link VersionParseException} will be thrown if the
	 *             specified {@link String} cannot be parsed.
	 */
	public IntegerVersion(String versionString) {
		if (versionString == null)
			throw new IllegalArgumentException(
					"Null version strings not supported.");

		this.versionString = versionString;

		try {
			this.versionValue = Integer.parseInt(versionString.trim());
		} catch (NumberFormatException e) {
			throw new VersionParseException(versionString, this.getClass(), e);
		}
		if (versionValue < 0)
			throw new VersionParseException(versionString, this.getClass());
	}

	/**
	 * Constructs a new {@link IntegerVersion}.
	 * 
	 * @param versionValue
	 *            the {@link Integer} value of the version number that is
	 *            represented by this {@link IntegerVersion}
	 */
	public IntegerVersion(Integer versionValue) {
		if (versionValue == null)
			throw new IllegalArgumentException(
					"Null version strings not supported.");
		if (versionValue < 0)
			throw new IllegalArgumentException(
					"Negative versions not supported.");

		this.versionString = null;
		this.versionValue = versionValue;
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		if (versionString != null)
			return versionString;
		else
			return versionValue.toString();
	}

	/**
	 * @see com.justdavis.jessentials.jversionsanity.Version#compareTo(com.justdavis.jessentials.jversionsanity.Version)
	 */
	@Override
	public int compareTo(Version otherVersion) {
		if (otherVersion == null)
			throw new IllegalArgumentException();
		if (!(otherVersion instanceof IntegerVersion))
			throw new ClassCastException(String.format("The version '%s'"
					+ " of type '%s' does not match this Version"
					+ " implementation type of '%s'.", otherVersion,
					otherVersion.getClass(), this.getClass()));

		IntegerVersion otherIntegerVersion = (IntegerVersion) otherVersion;
		return versionValue.compareTo(otherIntegerVersion.versionValue);
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		/*
		 * This method was generated by Eclipse's 'Source > Generate hashCode()
		 * and equals()...' feature.
		 */

		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((versionValue == null) ? 0 : versionValue.hashCode());
		return result;
	}

	/**
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		/*
		 * This method was generated by Eclipse's 'Source > Generate hashCode()
		 * and equals()...' feature.
		 */

		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		IntegerVersion other = (IntegerVersion) obj;
		if (versionValue == null) {
			if (other.versionValue != null)
				return false;
		} else if (!versionValue.equals(other.versionValue))
			return false;
		return true;
	}
}
